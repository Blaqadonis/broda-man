name: Listening For a PR Comment for Broda-man

on:
  issue_comment:
    types:
      - created

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  new-model-evaluation:
    if: (github.event.issue.pull_request != null) && contains(github.event.comment.body, '/brodaman')
    runs-on: windows-latest
    steps:
      - name: Copy Repository Contents
        uses: actions/checkout@main

      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9.0'

      - name: see payload # this step is for debugging purposes only, so you can see the payload.
        run: echo "PAYLOAD:\n${PAYLOAD}\n"
        env:
          PAYLOAD: ${{ toJSON(github.event) }}

      - name: Parse Model ID from Comment
        id: parse-model-id
        shell: python
        run: |
          pip install ghapi wandb
          import re
          import os
          comment = os.getenv('BRODAMAN_COMMENT', '')
          match = re.search(r'/brodaman[\s+](\S+)', comment)
            
          if match:
            print('VAL_FOUND=true')
            print(f'BRODAMAN_FINETUNE_MODEL_SUFFIX={match.group(1)}')
          else:
            print('VAL_FOUND=false') 
        env:
          BRODAMAN_COMMENT: "${{ github.event.comment.body }}"

      - name: Generate the evaluation report
        if: steps.parse-model-id.outputs.VAL_FOUND == 'true'
        id: new-model-evaluation-report
        run: |
          python src/eval.py
        env:
          BRODAMAN_FINETUNE_MODEL_SUFFIX: ${{ steps.parse-model-id.outputs.BRODAMAN_FINETUNE_MODEL_SUFFIX }}

      - name: Make a comment
        shell: python
        run: |
          import os
          from ghapi.core import GhApi
          owner,repo = os.environ['REPO'].split('/')
          api = GhApi(owner=owner, repo=repo)
          api.issues.create_comment(os.environ['NUMBER'], "Hi! I'm making a comment with `ghapi` in Actions!")
        env:
          NUMBER: ${{ github.event.number }} 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
